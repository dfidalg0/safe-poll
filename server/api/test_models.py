from django.test import TestCase, TransactionTestCase
from .models import (UserAccount, Poll, Token, TokenManager) 
import traceback

#Third-party app imports
from model_bakery import baker


'''Test --> models.py'''

#Token and TokenManager:
class TokenModelTests(TransactionTestCase):

    def setUp(self):
        #Create auxiliary models:
        self.aux_poll = baker.make('api.Poll')
        self.aux_user = baker.make('api.UserAccount')


    def test__generate_token__length(self):
        """
        This test checks whether the token generated by the method TokenManager.generate_token() 
        has length 500.
        """
        token_manager = TokenManager()
        expected_length = 500
        for _ in range(20):
            length = len(token_manager.generate_token())
            self.assertEqual(length, expected_length)

    def test__create_one_token_(self):
        """
        This test tests whether is possible to create a token.
        """
        try:
            new_token = Token.objects.create_token(user=self.aux_user, poll=self.aux_poll)
            token_created = True
            error_msg = ''
        except:
            token_created = False
            new_token = None
            error_msg = traceback.format_exc()
        self.assertIs(token_created, True, error_msg)
        self.assertIsInstance(new_token, Token)
        num_of_tokens = len(Token.objects.all())
        self.assertEqual(num_of_tokens, 1)

    def test__create_one_thousand_tokens_for_the_same_poll(self):
        """
        This test tests whether is possible to create a token.
        """
        for num in range(1, 1001):
            aux_user = baker.make('api.UserAccount')
            new_token = Token.objects.create_token(user=aux_user, poll=self.aux_poll)
            num_of_tokens = len(Token.objects.all())
            self.assertEqual(num_of_tokens, num)
        num_of_tokens = len(Token.objects.get_queryset().filter(poll=self.aux_poll))
        self.assertEqual(num_of_tokens, 1000)


    def test__create_two_tokens__the_same_poll_and_user(self):
        """
        Must be impossible to create two tokens for the same user in a poll.
        """
        Token.objects.create_token(user=self.aux_user, poll=self.aux_poll)
        num_of_tokens = len(Token.objects.all())
        self.assertEqual(num_of_tokens, 1)
        new_token = Token.objects.create_token(user=self.aux_user, poll=self.aux_poll)
        num_of_tokens = len(Token.objects.all())
        self.assertEqual(num_of_tokens, 1)
        self.assertIsNone(new_token)
        
    def test__create_50_tokens__the_same_poll_and_user(self):
        """
        Must be impossible to create two tokens for the same user in a poll.
        """
        Token.objects.create_token(user=self.aux_user, poll=self.aux_poll)
        num_of_tokens = len(Token.objects.all())
        self.assertEqual(num_of_tokens, 1)
        for _ in range(49):
            new_token = Token.objects.create_token(user=self.aux_user, poll=self.aux_poll)
            num_of_tokens = len(Token.objects.all())
            self.assertEqual(num_of_tokens, 1)
            self.assertIsNone(new_token)


    def test__create_tokens_with_wrong_type_arguments(self):
        """
        Must be impossible to create two tokens for the same user in a poll.
        """
        with self.assertRaises(TypeError):
            Token.objects.create_token(user=123, poll=self.aux_poll)
        with self.assertRaises(TypeError):
            Token.objects.create_token(user=123, poll='Hello')
        with self.assertRaises(TypeError):
            Token.objects.create_token(user=self.aux_user, poll='Hello')
        with self.assertRaises(TypeError):
            Token.objects.create_token(None, None)
